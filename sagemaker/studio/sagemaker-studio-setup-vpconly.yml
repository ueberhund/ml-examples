AWSTemplateFormatVersion: "2010-09-09"
Description: This template sets up SageMaker Studio in a VPC, sets up a bucket, and the appropriate VPC endpoints so that the bucket is only accessible via the endpoint (and no other buckets)

Outputs:
  S3VPCEndpoint:
    Value: !Ref S3Endpoint
    Description: The ID of the S3 VPC endpoint
  S3Bucket:
    Value: !Ref DataBucket
    Description: The name of the bucket accessible to SageMaker studio

Resources:
###############################################
#
# VPC Resources
#
###############################################
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "192.168.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  IG:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  IGAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IG
      VpcId: !Ref VPC
  
  IGVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  IGVPCRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref IGVPCRouteTable
      GatewayId: !Ref IG

  Subnet1ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IGVPCRouteTable
      SubnetId: !Ref Subnet1

  Subnet2ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IGVPCRouteTable
      SubnetId: !Ref Subnet2

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "192.168.1.0/26"
      AvailabilityZone: !Select [0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: SubnetType
        Value: Public Subnet
      - Key: Name
        Value: !Ref "AWS::StackName"
      VpcId: !Ref VPC

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "192.168.2.0/26"
      AvailabilityZone: !Select [1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: SubnetType
        Value: Public Subnet
      - Key: Name
        Value: !Ref "AWS::StackName"
      VpcId: !Ref VPC

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "192.168.3.0/26"
      AvailabilityZone: !Select [1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: SubnetType
        Value: Private Subnet
      - Key: Name
        Value: !Ref "AWS::StackName"
      VpcId: !Ref VPC

  Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "192.168.4.0/26"
      AvailabilityZone: !Select [0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: SubnetType
        Value: Private Subnet
      - Key: Name
        Value: !Ref "AWS::StackName"
      VpcId: !Ref VPC

###############################################
#
# Security Groups
#
###############################################

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Public security group
      SecurityGroupIngress:
      -
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Private security group
      SecurityGroupIngress:
      -
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt PublicSecurityGroup.GroupId
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  SageMakerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for SageMaker Studio
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  SageMakerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SageMakerSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SageMakerSecurityGroup

###############################################
#
# IAM
#
###############################################

  # Role #1 used by SageMaker Studio domain
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub AmazonSageMaker-ExecutionRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-bucketpermissions"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - "arn:aws:s3:::sagemaker*"
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"


  # Role #2 used by SageMaker Studio domain
  AmazonSageMakerServiceCatalogProductsLaunchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonSageMakerServiceCatalogProductsLaunchRole
      Description: "SageMaker role created from the SageMaker AWS Management Console. This role has the permissions required to launch the Amazon SageMaker portfolio of products from AWS ServiceCatalog."
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: servicecatalog.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"
      
  # Role #3 used by SageMaker Studio domain
  AmazonSageMakerServiceCatalogProductsUseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonSageMakerServiceCatalogProductsUseRole
      Description: "SageMaker role created from the SageMaker AWS Management Console. This role has the permissions required to use the Amazon SageMaker portfolio of products from AWS ServiceCatalog."
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codepipeline.amazonaws.com
                - firehose.amazonaws.com
                - cloudformation.amazonaws.com 
                - glue.amazonaws.com
                - events.amazonaws.com
                - sagemaker.amazonaws.com
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
                - codebuild.amazonaws.com 
            Action: 'sts:AssumeRole'
      Path: "/service-role/"
      Policies:
        - PolicyName: AmazonSageMakerServiceCatalogProductsUseRole-20210122T152377
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                Resource: 
                  - "arn:aws:cloudformation:*:*:stack/sagemaker-*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - "arn:aws:codebuild:*:*:project/sagemaker-*"
                  - "arn:aws:codebuild:*:*:build/sagemaker-*"
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource:
                  - "arn:aws:codecommit:*:*:sagemaker-*"
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - "arn:aws:codepipeline:*:*:sagemaker-*"
              - Effect: Allow
                Action:
                  - ec2:DescribeRouteTables
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:Describe*
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:BatchDeleteImage
                  - ecr:CompleteLayerUpload
                  - ecr:CreateRepository
                  - ecr:DeleteRepository
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource:
                  - "arn:aws:ecr:*:*:repository/sagemaker-*"
              - Effect: Allow
                Action: 
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource: 
                  - "arn:aws:events:*:*:rule/sagemaker-*"
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource:
                  - "arn:aws:firehose:*:*:deliverystream/sagemaker-*"
              - Effect: Allow
                Action: 
                  - glue:BatchCreatePartition
                  - glue:BatchDeletePartition
                  - glue:BatchDeleteTable
                  - glue:BatchDeleteTableVersion
                  - glue:BatchGetPartition
                  - glue:CreateDatabase
                  - glue:CreatePartition
                  - glue:CreateTable
                  - glue:DeletePartition
                  - glue:DeleteTable
                  - glue:DeleteTableVersion
                  - glue:GetDatabase
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetTableVersion
                  - glue:GetTableVersions
                  - glue:SearchTables
                  - glue:UpdatePartition
                  - glue:UpdateTable
                Resource:
                  - "arn:aws:glue:*:*:catalog"
                  - "arn:aws:glue:*:*:database/default"
                  - "arn:aws:glue:*:*:database/global_temp"
                  - "arn:aws:glue:*:*:database/sagemaker-*"
                  - "arn:aws:glue:*:*:table/sagemaker-*"
                  - "arn:aws:glue:*:*:tableVersion/sagemaker-*"
              - Effect: Allow
                Action: 
                  - iam:PassRole
                Resource:
                  - "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsUse*"
              - Effect: Allow
                Action: 
                  - lambda:InvokeFunction
                Resource: 
                  - "arn:aws:lambda:*:*:function:sagemaker-*"
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogDelivery
                  - logs:Describe*
                  - logs:GetLogDelivery
                  - logs:GetLogEvents
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:UpdateLogDelivery
                Resource: "*"
              - Effect: Allow
                Action: 
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:GetBucketAcl
                  - s3:GetBucketCors
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutBucketCors
                Resource: 
                  - "arn:aws:s3:::aws-glue-*"
                  - "arn:aws:s3:::sagemaker-*"
              - Effect: Allow
                Action: 
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - "arn:aws:s3:::aws-glue-*"
                  - "arn:aws:s3:::sagemaker-*"
              - Effect: Allow
                Action:
                  - sagemaker:*
                NotResource:
                  - "arn:aws:sagemaker:*:*:domain/*"
                  - "arn:aws:sagemaker:*:*:user-profile/*"
                  - "arn:aws:sagemaker:*:*:app/*"
                  - "arn:aws:sagemaker:*:*:flow-definition/*"
              - Effect: Allow
                Action: 
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:DescribeStateMachineForExecution
                  - states:GetExecutionHistory
                  - states:ListExecutions
                  - states:ListTagsForResource
                  - states:StartExecution
                  - states:StopExecution
                  - states:TagResource
                  - states:UntagResource
                  - states:UpdateStateMachine
                Resource: 
                  - "arn:aws:states:*:*:stateMachine:sagemaker-*"
                  - "arn:aws:states:*:*:execution:sagemaker-*:*"
              - Effect: Allow
                Action: 
                  - states:ListStateMachines
                Resource: "*"
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"
  
  #Lambda role for enabling Studio projects
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub LambdaServiceCatalogAccess-${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - sagemaker:EnableSagemakerServicecatalogPortfolio
                  - servicecatalog:AssociatePrincipalWithPortfolio
                  - servicecatalog:AcceptPortfolioShare
                  - servicecatalog:ListAcceptedPortfolioShares
                Resource: "*"
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"
  

###############################################
#
# SageMaker Studio and User set up
#
###############################################
    
  SageMakerDomain:
    Type: AWS::SageMaker::Domain
    Properties: 
      AppNetworkAccessType: VpcOnly
      AuthMode: IAM
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
        SecurityGroups: 
          - !Ref SageMakerSecurityGroup
      DomainName: sagemaker-poc
      SubnetIds: 
        - !Ref Subnet1
        - !Ref Subnet2
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  SageMakerSampleUser:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId: !Ref SageMakerDomain
      UserProfileName: sagemaker-sample-user
      UserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

###############################################
#
# S3 Bucket
#
###############################################

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub sagemaker-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true 
        BlockPublicPolicy: true 
        IgnorePublicAcls: true 
        RestrictPublicBuckets: true 
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"

  DataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:ListBucket'
            Effect: Deny
            Resource:
              - !Sub "arn:aws:s3:::${DataBucket}"
              - !Sub "arn:aws:s3:::${DataBucket}/*"
            Principal: '*'
            Condition:
              StringNotEquals:
                'aws:sourceVpce': !Ref S3Endpoint

###############################################
#
# VPC Endpoints
#
###############################################
  
  # https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html
  SageMakerStudioEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub aws.sagemaker.${AWS::Region}.studio
      PrivateDnsEnabled: true 
      SecurityGroupIds:
        - !Ref SageMakerSecurityGroup
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC 
    
  SageMakerRuntimeEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sagemaker.runtime
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SageMakerSecurityGroup
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC 

  SageMakerAPIEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sagemaker.api
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SageMakerSecurityGroup
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC 

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC 
      RouteTableIds:
        - !Ref IGVPCRouteTable
      PolicyDocument:
        !Sub |
        {
          "Version":"2012-10-17",
          "Statement":[{
            "Effect":"Allow",
            "Principal": "*",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::${DataBucket}",
              "arn:aws:s3:::${DataBucket}/*"
            ]
          }]
        }

###############################################
#
# Enable SageMaker Studio projects 
#
###############################################

  EnableProjects:
    Type: Custom::ResourceForEnablingSageMakerProjects
    Properties:
      ServiceToken: !GetAtt EnableProjectsLambda.Arn
      ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  EnableProjectsLambda:
    Type: AWS::Lambda::Function
    DependsOn: SageMakerDomain
    Properties:
      FunctionName: CFEnableSagemakerProjects
      Code:
        ZipFile: |
          # Function: CFEnableSagemakerProjects
          # Purpose:  Enables Sagemaker Projects
          import json
          import boto3
          import cfnresponse

          client = boto3.client('sagemaker')
          sc_client = boto3.client('servicecatalog')

          def lambda_handler(event, context):
              response_status = cfnresponse.SUCCESS
              execution_role = event['ResourceProperties']['ExecutionRole']
              
              if 'RequestType' in event and event['RequestType'] == 'Create':
                  enable_projects(execution_role)
              cfnresponse.send(event, context, response_status, {}, '')
              

          def enable_projects(studio_role_arn):
              # enable Project on account level (accepts portfolio share)
              response = client.enable_sagemaker_servicecatalog_portfolio()

              # associate studio role with portfolio
              response = sc_client.list_accepted_portfolio_shares()

              portfolio_id = ''
              for portfolio in response['PortfolioDetails']:
                  if portfolio['ProviderName'] == 'Amazon SageMaker':
                      portfolio_id = portfolio['Id']

              response = sc_client.associate_principal_with_portfolio(
                  PortfolioId=portfolio_id,
                  PrincipalARN=studio_role_arn,
                  PrincipalType='IAM'
              )
      Description: Enable Sagemaker Projects
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 5
      Tags: 
        - Key: Name
          Value: !Ref "AWS::StackName"
